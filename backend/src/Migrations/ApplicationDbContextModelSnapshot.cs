// <auto-generated />
using System;
using Metabase.Data;
using Metabase.Enumerations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace Metabase.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("metabase")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "metabase", "component_category", new[] { "material", "layer", "unit" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "metabase", "database_verification_state", new[] { "pending", "verified" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "metabase", "institution_operating_state", new[] { "operating", "not_operating" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "metabase", "institution_representative_role", new[] { "owner", "assistant" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "metabase", "institution_state", new[] { "pending", "verified" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "metabase", "method_category", new[] { "measurement", "calculation" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "metabase", "prime_surface", new[] { "inside", "outside" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "metabase", "standardizer", new[] { "aerc", "agi", "ashrae", "breeam", "bs", "bsi", "cen", "cie", "dgnb", "din", "dvwg", "iec", "ies", "ift", "iso", "jis", "leed", "nfrc", "riba", "ul", "unece", "vdi", "vff", "well" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Metabase.Data.Component", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<NpgsqlRange<DateTime>?>("Availability")
                        .HasColumnType("tstzrange");

                    b.Property<ComponentCategory[]>("Categories")
                        .IsRequired()
                        .HasColumnType("metabase.component_category[]");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("component", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.ComponentAssembly", b =>
                {
                    b.Property<Guid>("AssembledComponentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PartComponentId")
                        .HasColumnType("uuid");

                    b.Property<byte?>("Index")
                        .HasColumnType("smallint");

                    b.Property<PrimeSurface?>("PrimeSurface")
                        .HasColumnType("metabase.prime_surface");

                    b.HasKey("AssembledComponentId", "PartComponentId");

                    b.HasIndex("PartComponentId");

                    b.ToTable("component_assembly", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.ComponentConcretizationAndGeneralization", b =>
                {
                    b.Property<Guid>("GeneralComponentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConcreteComponentId")
                        .HasColumnType("uuid");

                    b.HasKey("GeneralComponentId", "ConcreteComponentId");

                    b.HasIndex("ConcreteComponentId");

                    b.ToTable("component_concretization_and_generalization", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.ComponentManufacturer", b =>
                {
                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Pending")
                        .HasColumnType("boolean");

                    b.HasKey("ComponentId", "InstitutionId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("component_manufacturer", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.ComponentVariant", b =>
                {
                    b.Property<Guid>("OfComponentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToComponentId")
                        .HasColumnType("uuid");

                    b.HasKey("OfComponentId", "ToComponentId");

                    b.HasIndex("ToComponentId");

                    b.ToTable("component_variant", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.DataFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SchemaLocator")
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("data_format", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.Database", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Locator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OperatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DatabaseVerificationState>("VerificationState")
                        .HasColumnType("metabase.database_verification_state");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.ToTable("database", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.Institution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<InstitutionOperatingState>("OperatingState")
                        .HasColumnType("metabase.institution_operating_state");

                    b.Property<string>("PublicKey")
                        .HasColumnType("text");

                    b.Property<InstitutionState>("State")
                        .HasColumnType("metabase.institution_state");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("WebsiteLocator")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("institution", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.InstitutionMethodDeveloper", b =>
                {
                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Pending")
                        .HasColumnType("boolean");

                    b.HasKey("InstitutionId", "MethodId");

                    b.HasIndex("MethodId");

                    b.ToTable("institution_method_developer", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.InstitutionRepresentative", b =>
                {
                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Pending")
                        .HasColumnType("boolean");

                    b.Property<InstitutionRepresentativeRole>("Role")
                        .HasColumnType("metabase.institution_representative_role");

                    b.HasKey("InstitutionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("institution_representative", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.Method", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<NpgsqlRange<DateTime>?>("Availability")
                        .HasColumnType("tstzrange");

                    b.Property<string>("CalculationLocator")
                        .HasColumnType("text");

                    b.Property<MethodCategory[]>("Categories")
                        .IsRequired()
                        .HasColumnType("metabase.method_category[]");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlRange<DateTime>?>("Validity")
                        .HasColumnType("tstzrange");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("method", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("role", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role_claim", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("WebsiteLocator")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("user", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_claim", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("user_login", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.UserMethodDeveloper", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Pending")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "MethodId");

                    b.HasIndex("MethodId");

                    b.ToTable("user_method_developer", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_role", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("user_token", "metabase");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys", "metabase");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("text");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("Settings")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications", "metabase");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Scopes")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", "metabase");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Resources")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes", "metabase");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", "metabase");
                });

            modelBuilder.Entity("Metabase.Data.ComponentAssembly", b =>
                {
                    b.HasOne("Metabase.Data.Component", "AssembledComponent")
                        .WithMany("PartEdges")
                        .HasForeignKey("AssembledComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metabase.Data.Component", "PartComponent")
                        .WithMany("PartOfEdges")
                        .HasForeignKey("PartComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssembledComponent");

                    b.Navigation("PartComponent");
                });

            modelBuilder.Entity("Metabase.Data.ComponentConcretizationAndGeneralization", b =>
                {
                    b.HasOne("Metabase.Data.Component", "ConcreteComponent")
                        .WithMany("GeneralizationEdges")
                        .HasForeignKey("ConcreteComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metabase.Data.Component", "GeneralComponent")
                        .WithMany("ConcretizationEdges")
                        .HasForeignKey("GeneralComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConcreteComponent");

                    b.Navigation("GeneralComponent");
                });

            modelBuilder.Entity("Metabase.Data.ComponentManufacturer", b =>
                {
                    b.HasOne("Metabase.Data.Component", "Component")
                        .WithMany("ManufacturerEdges")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metabase.Data.Institution", "Institution")
                        .WithMany("ManufacturedComponentEdges")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Metabase.Data.ComponentVariant", b =>
                {
                    b.HasOne("Metabase.Data.Component", "OfComponent")
                        .WithMany("VariantEdges")
                        .HasForeignKey("OfComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metabase.Data.Component", "ToComponent")
                        .WithMany("VariantOfEdges")
                        .HasForeignKey("ToComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfComponent");

                    b.Navigation("ToComponent");
                });

            modelBuilder.Entity("Metabase.Data.DataFormat", b =>
                {
                    b.HasOne("Metabase.Data.Institution", "Manager")
                        .WithMany("ManagedDataFormats")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Metabase.Data.Publication", "Publication", b1 =>
                        {
                            b1.Property<Guid>("DataFormatId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Abstract")
                                .HasColumnType("text");

                            b1.Property<string>("ArXiv")
                                .HasColumnType("text");

                            b1.Property<string[]>("Authors")
                                .HasColumnType("text[]");

                            b1.Property<string>("Doi")
                                .HasColumnType("text");

                            b1.Property<string>("Section")
                                .HasColumnType("text");

                            b1.Property<string>("Title")
                                .HasColumnType("text");

                            b1.Property<string>("Urn")
                                .HasColumnType("text");

                            b1.Property<string>("WebAddress")
                                .HasColumnType("text");

                            b1.HasKey("DataFormatId");

                            b1.ToTable("data_format", "metabase");

                            b1.WithOwner()
                                .HasForeignKey("DataFormatId");
                        });

                    b.OwnsOne("Metabase.Data.Standard", "Standard", b1 =>
                        {
                            b1.Property<Guid>("DataFormatId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Abstract")
                                .HasColumnType("text");

                            b1.Property<string>("Locator")
                                .HasColumnType("text");

                            b1.Property<string>("Section")
                                .HasColumnType("text");

                            b1.Property<Standardizer[]>("Standardizers")
                                .IsRequired()
                                .HasColumnType("metabase.standardizer[]");

                            b1.Property<string>("Title")
                                .HasColumnType("text");

                            b1.Property<int?>("Year")
                                .HasColumnType("integer");

                            b1.HasKey("DataFormatId");

                            b1.ToTable("data_format", "metabase");

                            b1.WithOwner()
                                .HasForeignKey("DataFormatId");

                            b1.OwnsOne("Metabase.Data.Numeration", "Numeration", b2 =>
                                {
                                    b2.Property<Guid>("StandardDataFormatId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("MainNumber")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Prefix")
                                        .HasColumnType("text");

                                    b2.Property<string>("Suffix")
                                        .HasColumnType("text");

                                    b2.HasKey("StandardDataFormatId");

                                    b2.ToTable("data_format", "metabase");

                                    b2.WithOwner()
                                        .HasForeignKey("StandardDataFormatId");
                                });

                            b1.Navigation("Numeration")
                                .IsRequired();
                        });

                    b.Navigation("Manager");

                    b.Navigation("Publication");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("Metabase.Data.Database", b =>
                {
                    b.HasOne("Metabase.Data.Institution", "Operator")
                        .WithMany("OperatedDatabases")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("Metabase.Data.Institution", b =>
                {
                    b.HasOne("Metabase.Data.Institution", "Manager")
                        .WithMany("ManagedInstitutions")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Metabase.Data.InstitutionMethodDeveloper", b =>
                {
                    b.HasOne("Metabase.Data.Institution", "Institution")
                        .WithMany("DevelopedMethodEdges")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metabase.Data.Method", "Method")
                        .WithMany("InstitutionDeveloperEdges")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("Method");
                });

            modelBuilder.Entity("Metabase.Data.InstitutionRepresentative", b =>
                {
                    b.HasOne("Metabase.Data.Institution", "Institution")
                        .WithMany("RepresentativeEdges")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metabase.Data.User", "User")
                        .WithMany("RepresentedInstitutionEdges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Metabase.Data.Method", b =>
                {
                    b.HasOne("Metabase.Data.Institution", "Manager")
                        .WithMany("ManagedMethods")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Metabase.Data.Publication", "Publication", b1 =>
                        {
                            b1.Property<Guid>("MethodId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Abstract")
                                .HasColumnType("text");

                            b1.Property<string>("ArXiv")
                                .HasColumnType("text");

                            b1.Property<string[]>("Authors")
                                .HasColumnType("text[]");

                            b1.Property<string>("Doi")
                                .HasColumnType("text");

                            b1.Property<string>("Section")
                                .HasColumnType("text");

                            b1.Property<string>("Title")
                                .HasColumnType("text");

                            b1.Property<string>("Urn")
                                .HasColumnType("text");

                            b1.Property<string>("WebAddress")
                                .HasColumnType("text");

                            b1.HasKey("MethodId");

                            b1.ToTable("method", "metabase");

                            b1.WithOwner()
                                .HasForeignKey("MethodId");
                        });

                    b.OwnsOne("Metabase.Data.Standard", "Standard", b1 =>
                        {
                            b1.Property<Guid>("MethodId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Abstract")
                                .HasColumnType("text");

                            b1.Property<string>("Locator")
                                .HasColumnType("text");

                            b1.Property<string>("Section")
                                .HasColumnType("text");

                            b1.Property<Standardizer[]>("Standardizers")
                                .IsRequired()
                                .HasColumnType("metabase.standardizer[]");

                            b1.Property<string>("Title")
                                .HasColumnType("text");

                            b1.Property<int?>("Year")
                                .HasColumnType("integer");

                            b1.HasKey("MethodId");

                            b1.ToTable("method", "metabase");

                            b1.WithOwner()
                                .HasForeignKey("MethodId");

                            b1.OwnsOne("Metabase.Data.Numeration", "Numeration", b2 =>
                                {
                                    b2.Property<Guid>("StandardMethodId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("MainNumber")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Prefix")
                                        .HasColumnType("text");

                                    b2.Property<string>("Suffix")
                                        .HasColumnType("text");

                                    b2.HasKey("StandardMethodId");

                                    b2.ToTable("method", "metabase");

                                    b2.WithOwner()
                                        .HasForeignKey("StandardMethodId");
                                });

                            b1.Navigation("Numeration")
                                .IsRequired();
                        });

                    b.Navigation("Manager");

                    b.Navigation("Publication");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("Metabase.Data.RoleClaim", b =>
                {
                    b.HasOne("Metabase.Data.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Metabase.Data.UserClaim", b =>
                {
                    b.HasOne("Metabase.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Metabase.Data.UserLogin", b =>
                {
                    b.HasOne("Metabase.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Metabase.Data.UserMethodDeveloper", b =>
                {
                    b.HasOne("Metabase.Data.Method", "Method")
                        .WithMany("UserDeveloperEdges")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metabase.Data.User", "User")
                        .WithMany("DevelopedMethodEdges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Method");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Metabase.Data.UserRole", b =>
                {
                    b.HasOne("Metabase.Data.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metabase.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Metabase.Data.UserToken", b =>
                {
                    b.HasOne("Metabase.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("Metabase.Data.Component", b =>
                {
                    b.Navigation("ConcretizationEdges");

                    b.Navigation("GeneralizationEdges");

                    b.Navigation("ManufacturerEdges");

                    b.Navigation("PartEdges");

                    b.Navigation("PartOfEdges");

                    b.Navigation("VariantEdges");

                    b.Navigation("VariantOfEdges");
                });

            modelBuilder.Entity("Metabase.Data.Institution", b =>
                {
                    b.Navigation("DevelopedMethodEdges");

                    b.Navigation("ManagedDataFormats");

                    b.Navigation("ManagedInstitutions");

                    b.Navigation("ManagedMethods");

                    b.Navigation("ManufacturedComponentEdges");

                    b.Navigation("OperatedDatabases");

                    b.Navigation("RepresentativeEdges");
                });

            modelBuilder.Entity("Metabase.Data.Method", b =>
                {
                    b.Navigation("InstitutionDeveloperEdges");

                    b.Navigation("UserDeveloperEdges");
                });

            modelBuilder.Entity("Metabase.Data.User", b =>
                {
                    b.Navigation("DevelopedMethodEdges");

                    b.Navigation("RepresentedInstitutionEdges");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}