using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Antiforgery;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace Metabase.Controllers
{
    public sealed class AntiforgeryController : Controller
    {
        private const string CookieKey = "XSRF-TOKEN";

        private readonly IAntiforgery _antiforgeryService;

        public AntiforgeryController(IAntiforgery antiforgeryService)
        {
            _antiforgeryService = antiforgeryService;
        }

        [HttpGet("~/antiforgery/token")]
        // [Authorize]
        public async Task<IActionResult> Token()
        {
            // Keep in sync with the corresponding logic in `GraphQlConfiguration`.
            var cookieAuthenticateResult = await HttpContext.AuthenticateAsync(CookieAuthenticationDefaults.AuthenticationScheme).ConfigureAwait(false);
            if (cookieAuthenticateResult.Succeeded && cookieAuthenticateResult.Principal is not null)
            {
                HttpContext.User = cookieAuthenticateResult.Principal;
            }
            var tokens = _antiforgeryService.GetAndStoreTokens(HttpContext);
            HttpContext.Response.Cookies.Append(
                CookieKey,
                tokens.RequestToken ?? throw new InvalidOperationException("The request token supposed to be generated by the antiforgery service is null."),
                new CookieOptions
                {
                    HttpOnly = false
                }
            );
            return new StatusCodeResult(StatusCodes.Status200OK);
        }
    }
}