# Inspired by https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-3.1#https-configuration
# and https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-3.1#configure-nginx

proxy_redirect          off;
proxy_set_header        Host $http_host; # Use the HTTP request header field HOST through the variable `$http_host` instead of the host name `$host` because the former includes the port whereas the latter does not. This header is then used by ASP.NET Core for make relative paths absolute, for example, in the OpenId Configuration `/.well-known/openid-configuration`. The NGINX variables `$http_` are described in http://nginx.org/en/docs/http/ngx_http_core_module.html#var_http_
proxy_set_header        X-Real-IP $remote_addr;
proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header        X-Forwarded-Proto $scheme;
# proxy_http_version      1.1;
# proxy_set_header        Upgrade $http_upgrade;
# proxy_set_header        Connection keep-alive;
# proxy_cache_bypass      $http_upgrade;
client_max_body_size    10m;
client_body_buffer_size 128k;
proxy_connect_timeout   90;
proxy_send_timeout      90;
proxy_read_timeout      90;
proxy_buffer_size       128k;
proxy_buffers           4 256k;
proxy_busy_buffers_size 256k;

add_header X-Frame-Options "SAMEORIGIN"; # Secure from clickjacking: https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-3.1#secure-nginx-from-clickjacking

limit_req_zone $binary_remote_addr zone=one:10m rate=30r/s;
server_tokens  off;

sendfile              on;
keepalive_timeout     29; # Adjust to the lowest possible value that makes sense for your use case.
client_body_timeout   10;
client_header_timeout 10;
send_timeout          10;

map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

upstream backend {
  server backend:8080;
}

upstream frontend {
  server frontend:8080;
}

upstream email {
  server email:80;
}

server {
  listen     *:80;
  add_header Strict-Transport-Security max-age=15768000;
  return     301 https://$host$request_uri;
}

server {
  listen                    *:443 ssl;
  server_name               ${SERVER_NAME};
  ssl_certificate           /etc/nginx/ssl/${SSL_CERTIFICATE_BASE_FILE_NAME}.chained.crt;
  ssl_certificate_key       /etc/nginx/ssl/${SSL_CERTIFICATE_BASE_FILE_NAME}.key;
  ssl_protocols             TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers               "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
  ssl_ecdh_curve            secp384r1;
  ssl_session_cache         shared:SSL:10m;
  ssl_session_tickets       off;
  ssl_stapling              on; #ensure your cert is capable
  ssl_stapling_verify       on; #ensure your cert is capable

  add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload" always;
  add_header X-Frame-Options DENY;
  add_header X-Content-Type-Options nosniff; # Secure from MIME-type sniffing: https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-3.1#mime-type-sniffing

  set $maintenance 0;
  if (-f $document_root/maintenance.html) {
    set $maintenance 1;
  }
  if ($internal != 1) {
    set $maintenance "${maintenance}1";
  }
  if ($maintenance = 11) {
    return 503;
  }

  location / {
    proxy_pass http://frontend;
    limit_req  zone=one burst=30 nodelay;
  }

  location /graphql {
    proxy_pass http://backend;
    limit_req  zone=one burst=10 nodelay;
  }

  location /connect {
    proxy_pass http://backend;
    limit_req  zone=one burst=10 nodelay;
  }

  location /.well-known {
    proxy_pass http://backend;
    limit_req  zone=one burst=1 nodelay;
  }

  location /personal-user-data {
    proxy_pass http://backend;
    limit_req  zone=one burst=1 nodelay;
  }

  location /health {
    proxy_pass http://backend;
    limit_req  zone=one burst=20 nodelay;
  }

  location /email {
    proxy_pass http://email;
    limit_req  zone=one burst=20 nodelay;
  }

  location /email/hubs {
    proxy_pass http://email;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    limit_req  zone=one burst=20 nodelay;
  }

  error_page 503 @maintenance;
  location @maintenance {
    internal;
    add_header Retry-After 120 always;
    default_type application/json;
    if ($http_accept ~ application/json) {
      return 503 "{\"errors\": [{\"code\": \"MAINTENANCE\", \"message\": \"We are under maintenance and will be back soon!\", \"path\": []}]}";
    }
    rewrite ^(.*)$ /maintenance.html break;
  }
}
