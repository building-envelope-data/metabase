schema {
  query: Query
  mutation: Mutation
}

interface Data {
  appliedMethod: AppliedMethod!
  componentId: Uuid!
  description: String
  name: String
  resourceTree: GetHttpsResourceTree!
  timestamp: DateTime!
  uuid: Uuid!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

interface Reference {
  abstract: String
  section: String
  title: String
}

interface Stakeholder {
  name: String!
}

type AddComponentAssemblyError {
  code: AddComponentAssemblyErrorCode!
  message: String!
  path: [String!]!
}

type AddComponentAssemblyPayload {
  assembledOfEdge: ComponentAssembledOfEdge
  errors: [AddComponentAssemblyError!]
  partOfEdge: ComponentPartOfEdge
  query: Query!
}

type AddComponentGeneralizationError {
  code: AddComponentGeneralizationErrorCode!
  message: String!
  path: [String!]!
}

type AddComponentGeneralizationPayload {
  concretizationOfEdge: ComponentConcretizationOfEdge
  errors: [AddComponentGeneralizationError!]
  generalizationOfEdge: ComponentGeneralizationOfEdge
  query: Query!
}

type AddComponentManufacturerError {
  code: AddComponentManufacturerErrorCode!
  message: String!
  path: [String!]!
}

type AddComponentManufacturerPayload {
  componentManufacturerEdge: ComponentManufacturerEdge
  errors: [AddComponentManufacturerError!]
  manufacturedComponentEdge: InstitutionManufacturedComponentEdge
  query: Query!
}

type AddComponentVariantError {
  code: AddComponentVariantErrorCode!
  message: String!
  path: [String!]!
}

type AddComponentVariantPayload {
  errors: [AddComponentVariantError!]
  query: Query!
  reverseVariantOfEdge: ComponentVariantOfEdge
  variantOfEdge: ComponentVariantOfEdge
}

type AddInstitutionMethodDeveloperError {
  code: AddInstitutionMethodDeveloperErrorCode!
  message: String!
  path: [String!]!
}

type AddInstitutionMethodDeveloperPayload {
  developedMethodEdge: InstitutionDevelopedMethodEdge
  errors: [AddInstitutionMethodDeveloperError!]
  methodDeveloperEdge: InstitutionMethodDeveloperEdge
  query: Query!
}

type AddInstitutionRepresentativeError {
  code: AddInstitutionRepresentativeErrorCode!
  message: String!
  path: [String!]!
}

type AddInstitutionRepresentativePayload {
  errors: [AddInstitutionRepresentativeError!]
  institutionRepresentativeEdge: InstitutionRepresentativeEdge
  query: Query!
  representedInstitutionEdge: UserRepresentedInstitutionEdge
}

type AddUserMethodDeveloperError {
  code: AddUserMethodDeveloperErrorCode!
  message: String!
  path: [String!]!
}

type AddUserMethodDeveloperPayload {
  developedMethodEdge: UserDevelopedMethodEdge
  errors: [AddUserMethodDeveloperError!]
  methodDeveloperEdge: UserMethodDeveloperEdge
  query: Query!
}

type AddUserRoleError {
  code: AddUserRoleErrorCode!
  message: String!
  path: [String!]!
}

type AddUserRolePayload {
  errors: [AddUserRoleError!]
  query: Query!
  user: User
}

type AppliedMethod {
  method: Method
  methodId: Uuid!
}

type CalorimetricData implements Data {
  appliedMethod: AppliedMethod!
  component: Component
  componentId: Uuid!
  createdAt: DateTime!
  creator: Institution
  creatorId: Uuid!
  description: String
  gValues: [Float!]!
  id: String!
  locale: String!
  name: String
  resources: [GetHttpsResource!]!
  resourceTree: GetHttpsResourceTree!
  timestamp: DateTime!
  uuid: Uuid!
  uValues: [Float!]!
  warnings: [String!]!
}

type CalorimetricDataConnection {
  edges: [CalorimetricDataEdge!]!
  nodes: [CalorimetricData!]!
  timestamp: DateTime!
  totalCount: NonNegativeInt
}

type CalorimetricDataEdge {
  cursor: String!
  node: CalorimetricData!
}

type ChangeInstitutionRepresentativeRoleError {
  code: ChangeInstitutionRepresentativeRoleErrorCode!
  message: String!
  path: [String!]!
}

type ChangeInstitutionRepresentativeRolePayload {
  errors: [ChangeInstitutionRepresentativeRoleError!]
  institutionRepresentativeEdge: InstitutionRepresentativeEdge
  query: Query!
  representedInstitutionEdge: UserRepresentedInstitutionEdge
}

type ChangeUserEmailError {
  code: ChangeUserEmailErrorCode!
  message: String!
  path: [String!]!
}

type ChangeUserEmailPayload {
  errors: [ChangeUserEmailError!]
  query: Query!
  user: User
}

type ChangeUserPasswordError {
  code: ChangeUserPasswordErrorCode!
  message: String!
  path: [String!]!
}

type ChangeUserPasswordPayload {
  errors: [ChangeUserPasswordError!]
  query: Query!
  user: User
}

type Component implements Node {
  abbreviation: String
  assembledOf: ComponentAssembledOfConnection!
  availability: OpenEndedDateTimeRange
  canCurrentUserUpdateNode: Boolean!
  categories: [ComponentCategory!]!
  concretizationOf: ComponentConcretizationOfConnection!
  description: String!
  generalizationOf: ComponentGeneralizationOfConnection!
  id: ID!
  manufacturers(pending: Boolean! = false): ComponentManufacturerConnection!
  name: String!
  partOf: ComponentPartOfConnection!
  uuid: Uuid!
  variantOf: ComponentVariantOfConnection!
}

type ComponentAssembledOfConnection {
  canCurrentUserAddEdge: Boolean!
  edges: [ComponentAssembledOfEdge!]!
}

type ComponentAssembledOfEdge {
  canCurrentUserRemoveEdge: Boolean!
  canCurrentUserUpdateEdge: Boolean!
  index: Byte
  node: Component!
  primeSurface: PrimeSurface
}

type ComponentConcretizationOfConnection {
  canCurrentUserAddEdge: Boolean!
  edges: [ComponentConcretizationOfEdge!]!
}

type ComponentConcretizationOfEdge {
  canCurrentUserRemoveEdge: Boolean!
  node: Component!
}

type ComponentGeneralizationOfConnection {
  canCurrentUserAddEdge: Boolean!
  edges: [ComponentGeneralizationOfEdge!]!
}

type ComponentGeneralizationOfEdge {
  canCurrentUserRemoveEdge: Boolean!
  node: Component!
}

type ComponentManufacturerConnection {
  canCurrentUserAddEdge: Boolean!
  edges: [ComponentManufacturerEdge!]!
}

type ComponentManufacturerEdge {
  canCurrentUserConfirmEdge: Boolean!
  canCurrentUserRemoveEdge: Boolean!
  node: Institution!
}

type ComponentPartOfConnection {
  canCurrentUserAddEdge: Boolean!
  edges: [ComponentPartOfEdge!]!
}

type ComponentPartOfEdge {
  canCurrentUserRemoveEdge: Boolean!
  canCurrentUserUpdateEdge: Boolean!
  index: Byte
  node: Component!
  primeSurface: PrimeSurface
}

type ComponentVariantOfConnection {
  canCurrentUserAddEdge: Boolean!
  edges: [ComponentVariantOfEdge!]!
}

type ComponentVariantOfEdge {
  canCurrentUserRemoveEdge: Boolean!
  node: Component!
}

"A connection to a list of items."
type ComponentsConnection {
  "A list of edges."
  edges: [ComponentsEdge!]
  "A flattened list of the nodes."
  nodes: [Component!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type ComponentsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Component!
}

type ConfirmComponentManufacturerError {
  code: ConfirmComponentManufacturerErrorCode!
  message: String!
  path: [String!]!
}

type ConfirmComponentManufacturerPayload {
  componentManufacturerEdge: ComponentManufacturerEdge
  errors: [ConfirmComponentManufacturerError!]
  manufacturedComponentEdge: InstitutionManufacturedComponentEdge
  query: Query!
}

type ConfirmInstitutionMethodDeveloperError {
  code: ConfirmInstitutionMethodDeveloperErrorCode!
  message: String!
  path: [String!]!
}

type ConfirmInstitutionMethodDeveloperPayload {
  developedMethodEdge: InstitutionDevelopedMethodEdge
  errors: [ConfirmInstitutionMethodDeveloperError!]
  methodDeveloperEdge: InstitutionMethodDeveloperEdge
  query: Query!
}

type ConfirmInstitutionRepresentativeError {
  code: ConfirmInstitutionRepresentativeErrorCode!
  message: String!
  path: [String!]!
}

type ConfirmInstitutionRepresentativePayload {
  errors: [ConfirmInstitutionRepresentativeError!]
  institutionRepresentativeEdge: InstitutionRepresentativeEdge
  query: Query!
  representedInstitutionEdge: UserRepresentedInstitutionEdge
}

type ConfirmUserEmailChangeError {
  code: ConfirmUserEmailChangeErrorCode!
  message: String!
  path: [String!]!
}

type ConfirmUserEmailChangePayload {
  errors: [ConfirmUserEmailChangeError!]
  query: Query!
  user: User
}

type ConfirmUserEmailError {
  code: ConfirmUserEmailErrorCode!
  message: String!
  path: [String!]!
}

type ConfirmUserEmailPayload {
  errors: [ConfirmUserEmailError!]
  query: Query!
  user: User
}

type ConfirmUserMethodDeveloperError {
  code: ConfirmUserMethodDeveloperErrorCode!
  message: String!
  path: [String!]!
}

type ConfirmUserMethodDeveloperPayload {
  developedMethodEdge: UserDevelopedMethodEdge
  errors: [ConfirmUserMethodDeveloperError!]
  methodDeveloperEdge: UserMethodDeveloperEdge
  query: Query!
}

type CreateComponentError {
  code: CreateComponentErrorCode!
  message: String!
  path: [String!]!
}

type CreateComponentPayload {
  component: Component
  errors: [CreateComponentError!]
  query: Query!
}

type CreateDataFormatError {
  code: CreateDataFormatErrorCode!
  message: String!
  path: [String!]!
}

type CreateDataFormatPayload {
  dataFormat: DataFormat
  errors: [CreateDataFormatError!]
  query: Query!
}

type CreateDatabaseError {
  code: CreateDatabaseErrorCode!
  message: String!
  path: [String!]!
}

type CreateDatabasePayload {
  database: Database
  errors: [CreateDatabaseError!]
  query: Query!
}

type CreateInstitutionError {
  code: CreateInstitutionErrorCode!
  message: String!
  path: [String!]!
}

type CreateInstitutionPayload {
  errors: [CreateInstitutionError!]
  institution: Institution
  query: Query!
}

type CreateMethodError {
  code: CreateMethodErrorCode!
  message: String!
  path: [String!]!
}

type CreateMethodPayload {
  errors: [CreateMethodError!]
  method: Method
  query: Query!
}

type DataApproval {
  approver: Institution
  approverId: Uuid!
  keyFingerprint: String!
  query: String!
  response: String!
  signature: String!
  timestamp: DateTime!
}

type DataConnection {
  edges: [DataEdge!]!
  nodes: [Data!]!
  timestamp: DateTime!
  totalCount: NonNegativeInt
}

type DataEdge {
  cursor: String!
  node: Data!
}

type DataFormat implements Node {
  canCurrentUserUpdateNode: Boolean!
  description: String!
  extension: String
  id: ID!
  manager: DataFormatManagerEdge!
  mediaType: String!
  name: String!
  reference: Reference
  schemaLocator: Url
  uuid: Uuid!
}

type DataFormatManagerEdge {
  node: Institution!
}

"A connection to a list of items."
type DataFormatsConnection {
  "A list of edges."
  edges: [DataFormatsEdge!]
  "A flattened list of the nodes."
  nodes: [DataFormat!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type DataFormatsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DataFormat!
}

type Database implements Node {
  allCalorimetricData(after: String before: String first: NonNegativeInt last: NonNegativeInt locale: String timestamp: DateTime where: CalorimetricDataPropositionInput): CalorimetricDataConnection
  allData(after: String before: String first: NonNegativeInt last: NonNegativeInt locale: String timestamp: DateTime where: DataPropositionInput): DataConnection
  allHygrothermalData(after: String before: String first: NonNegativeInt last: NonNegativeInt locale: String timestamp: DateTime where: HygrothermalDataPropositionInput): HygrothermalDataConnection
  allOpticalData(after: String before: String first: NonNegativeInt last: NonNegativeInt locale: String timestamp: DateTime where: OpticalDataPropositionInput): OpticalDataConnection
  allPhotovoltaicData(after: String before: String first: NonNegativeInt last: NonNegativeInt locale: String timestamp: DateTime where: PhotovoltaicDataPropositionInput): PhotovoltaicDataConnection
  calorimetricData(id: Uuid! locale: String timestamp: DateTime): CalorimetricData
  canCurrentUserUpdateNode: Boolean!
  canCurrentUserVerifyNode: Boolean!
  data(id: Uuid! locale: String timestamp: DateTime): Data
  description: String!
  hasCalorimetricData(locale: String timestamp: DateTime where: CalorimetricDataPropositionInput): Boolean
  hasData(locale: String timestamp: DateTime where: DataPropositionInput): Boolean
  hasHygrothermalData(locale: String timestamp: DateTime where: HygrothermalDataPropositionInput): Boolean
  hasOpticalData(locale: String timestamp: DateTime where: OpticalDataPropositionInput): Boolean
  hasPhotovoltaicData(locale: String timestamp: DateTime where: PhotovoltaicDataPropositionInput): Boolean
  hygrothermalData(id: Uuid! locale: String timestamp: DateTime): HygrothermalData
  id: ID!
  locator: Url!
  name: String!
  operator: DatabaseOperatorEdge!
  opticalData(id: Uuid! locale: String timestamp: DateTime): OpticalData
  photovoltaicData(id: Uuid! locale: String timestamp: DateTime): PhotovoltaicData
  uuid: Uuid!
  verificationCode: String!
  verificationState: DatabaseVerificationState!
}

type DatabaseOperatorEdge {
  node: Institution!
}

"A connection to a list of items."
type DatabasesConnection {
  "A list of edges."
  edges: [DatabasesEdge!]
  "A flattened list of the nodes."
  nodes: [Database!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type DatabasesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Database!
}

type DeleteInstitutionError {
  code: DeleteInstitutionErrorCode!
  message: String!
  path: [String!]!
}

type DeleteInstitutionPayload {
  errors: [DeleteInstitutionError!]
  query: Query!
}

type DeletePersonalUserDataError {
  code: DeletePersonalUserDataErrorCode!
  message: String!
  path: [String!]!
}

type DeletePersonalUserDataPayload {
  errors: [DeletePersonalUserDataError!]
  query: Query!
  user: User
}

type DeleteUserError {
  code: DeleteUserErrorCode!
  message: String!
  path: [String!]!
}

type DeleteUserPayload {
  errors: [DeleteUserError!]
  query: Query!
  user: User
}

type DisableUserTwoFactorAuthenticationError {
  code: DisableUserTwoFactorAuthenticationErrorCode!
  message: String!
  path: [String!]!
}

type DisableUserTwoFactorAuthenticationPayload {
  errors: [DisableUserTwoFactorAuthenticationError!]
  query: Query!
  user: User
}

type EnableUserTwoFactorAuthenticatorError {
  code: EnableUserTwoFactorAuthenticatorErrorCode!
  message: String!
  path: [String!]!
}

type EnableUserTwoFactorAuthenticatorPayload {
  authenticatorUri: String
  errors: [EnableUserTwoFactorAuthenticatorError!]
  query: Query!
  sharedKey: String
  twoFactorRecoveryCodes: [String!]
  user: User
}

type ForgetUserTwoFactorAuthenticationClientError {
  code: ForgetUserTwoFactorAuthenticationClientErrorCode!
  message: String!
  path: [String!]!
}

type ForgetUserTwoFactorAuthenticationClientPayload {
  errors: [ForgetUserTwoFactorAuthenticationClientError!]
  query: Query!
  user: User
}

type GenerateUserTwoFactorAuthenticatorSharedKeyAndQrCodeUriError {
  code: GenerateUserTwoFactorAuthenticatorSharedKeyAndQrCodeUriErrorCode!
  message: String!
  path: [String!]!
}

type GenerateUserTwoFactorAuthenticatorSharedKeyAndQrCodeUriPayload {
  authenticatorUri: String
  errors: [GenerateUserTwoFactorAuthenticatorSharedKeyAndQrCodeUriError!]
  query: Query!
  sharedKey: String
  user: User
}

type GenerateUserTwoFactorRecoveryCodesError {
  code: GenerateUserTwoFactorRecoveryCodesErrorCode!
  message: String!
  path: [String!]!
}

type GenerateUserTwoFactorRecoveryCodesPayload {
  errors: [GenerateUserTwoFactorRecoveryCodesError!]
  query: Query!
  twoFactorRecoveryCodes: [String!]
  user: User
}

type GetHttpsResource {
  dataFormat: DataFormat
  dataFormatId: Uuid!
  description: String!
  hashValue: String!
  locator: Url!
}

type GetHttpsResourceTree {
  root: GetHttpsResourceTreeRoot!
}

type GetHttpsResourceTreeNonRootVertex {
  appliedConversionMethod: ToTreeVertexAppliedConversionMethod!
  parentId: String!
  value: GetHttpsResource!
  vertexId: String!
}

type GetHttpsResourceTreeRoot {
  value: GetHttpsResource!
}

type HygrothermalData implements Data {
  appliedMethod: AppliedMethod!
  component: Component
  componentId: Uuid!
  createdAt: DateTime!
  creator: Institution
  creatorId: Uuid!
  description: String
  id: String!
  locale: String!
  name: String
  resources: [GetHttpsResource!]!
  resourceTree: GetHttpsResourceTree!
  timestamp: DateTime!
  uuid: Uuid!
  warnings: [String!]!
}

type HygrothermalDataConnection {
  edges: [HygrothermalDataEdge!]!
  nodes: [HygrothermalData!]!
  timestamp: DateTime!
  totalCount: NonNegativeInt
}

type HygrothermalDataEdge {
  cursor: String!
  node: HygrothermalData!
}

type Institution implements Node & Stakeholder {
  abbreviation: String
  canCurrentUserDeleteNode: Boolean!
  canCurrentUserUpdateNode: Boolean!
  description: String!
  developedMethods(pending: Boolean! = false): InstitutionDevelopedMethodConnection!
  id: ID!
  managedDataFormats: InstitutionManagedDataFormatConnection!
  managedInstitutions: InstitutionManagedInstitutionConnection!
  managedMethods: InstitutionManagedMethodConnection!
  manager: InstitutionManagerEdge
  manufacturedComponents(pending: Boolean! = false): InstitutionManufacturedComponentConnection!
  name: String!
  operatedDatabases: InstitutionOperatedDatabaseConnection!
  publicKey: String
  representatives(pending: Boolean! = false): InstitutionRepresentativeConnection!
  state: InstitutionState!
  uuid: Uuid!
  websiteLocator: Url
}

type InstitutionDevelopedMethodConnection {
  canCurrentUserConfirmEdge: Boolean!
  edges: [InstitutionDevelopedMethodEdge!]!
}

type InstitutionDevelopedMethodEdge {
  node: Method!
}

type InstitutionManagedDataFormatConnection {
  canCurrentUserAddEdge: Boolean!
  edges: [InstitutionManagedDataFormatEdge!]!
}

type InstitutionManagedDataFormatEdge {
  node: DataFormat!
}

type InstitutionManagedInstitutionConnection {
  canCurrentUserAddEdge: Boolean!
  edges: [InstitutionManagedInstitutionEdge!]!
}

type InstitutionManagedInstitutionEdge {
  node: Institution!
}

type InstitutionManagedMethodConnection {
  canCurrentUserAddEdge: Boolean!
  edges: [InstitutionManagedMethodEdge!]!
}

type InstitutionManagedMethodEdge {
  node: Method!
}

type InstitutionManagerEdge {
  node: Institution!
}

type InstitutionManufacturedComponentConnection {
  canCurrentUserAddEdge: Boolean!
  canCurrentUserConfirmEdge: Boolean!
  edges: [InstitutionManufacturedComponentEdge!]!
}

type InstitutionManufacturedComponentEdge {
  node: Component!
}

type InstitutionMethodDeveloperEdge {
  canCurrentUserConfirmEdge: Boolean!
  canCurrentUserRemoveEdge: Boolean!
  node: Institution!
}

type InstitutionOperatedDatabaseConnection {
  canCurrentUserAddEdge: Boolean!
  edges: [InstitutionOperatedDatabaseEdge!]!
}

type InstitutionOperatedDatabaseEdge {
  node: Database!
}

type InstitutionRepresentativeConnection {
  canCurrentUserAddEdge: Boolean!
  edges: [InstitutionRepresentativeEdge!]!
}

type InstitutionRepresentativeEdge {
  node: User!
  role: InstitutionRepresentativeRole!
}

"A connection to a list of items."
type InstitutionsConnection {
  "A list of edges."
  edges: [InstitutionsEdge!]
  "A flattened list of the nodes."
  nodes: [Institution!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type InstitutionsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Institution!
}

type LoginUserError {
  code: LoginUserErrorCode!
  message: String!
  path: [String!]!
}

type LoginUserPayload {
  errors: [LoginUserError!]
  query: Query!
  requiresTwoFactor: Boolean
  user: User
}

type LoginUserWithRecoveryCodeError {
  code: LoginUserWithRecoveryCodeErrorCode!
  message: String!
  path: [String!]!
}

type LoginUserWithRecoveryCodePayload {
  errors: [LoginUserWithRecoveryCodeError!]
  query: Query!
  user: User
}

type LoginUserWithTwoFactorCodeError {
  code: LoginUserWithTwoFactorCodeErrorCode!
  message: String!
  path: [String!]!
}

type LoginUserWithTwoFactorCodePayload {
  errors: [LoginUserWithTwoFactorCodeError!]
  query: Query!
  user: User
}

type LogoutUserError {
  code: LogoutUserErrorCode!
  message: String!
  path: [String!]!
}

type LogoutUserPayload {
  errors: [LogoutUserError!]
  query: Query!
  user: User
}

type Method implements Node {
  availability: OpenEndedDateTimeRange
  calculationLocator: Url
  canCurrentUserUpdateNode: Boolean!
  categories: [MethodCategory!]!
  description: String!
  developers(pending: Boolean! = false): MethodDeveloperConnection!
  id: ID!
  manager: MethodManagerEdge!
  name: String!
  reference: Reference
  uuid: Uuid!
  validity: OpenEndedDateTimeRange
}

type MethodDeveloperConnection {
  canCurrentUserAddInstitutionEdge: Boolean!
  canCurrentUserAddUserEdge: Boolean!
  edges: [MethodDeveloperEdge!]!
}

type MethodDeveloperEdge {
  canCurrentUserConfirmEdge: Boolean!
  canCurrentUserRemoveEdge: Boolean!
  node: Stakeholder!
}

type MethodManagerEdge {
  node: Institution!
}

"A connection to a list of items."
type MethodsConnection {
  "A list of edges."
  edges: [MethodsEdge!]
  "A flattened list of the nodes."
  nodes: [Method!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type MethodsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Method!
}

type Mutation {
  addComponentAssembly(input: AddComponentAssemblyInput!): AddComponentAssemblyPayload! @authorize(policy: "Write")
  addComponentGeneralization(input: AddComponentGeneralizationInput!): AddComponentGeneralizationPayload! @authorize(policy: "Write")
  addComponentManufacturer(input: AddComponentManufacturerInput!): AddComponentManufacturerPayload! @authorize(policy: "Write")
  addComponentVariant(input: AddComponentVariantInput!): AddComponentVariantPayload! @authorize(policy: "Write")
  addInstitutionMethodDeveloper(input: AddInstitutionMethodDeveloperInput!): AddInstitutionMethodDeveloperPayload! @authorize(policy: "Write")
  addInstitutionRepresentative(input: AddInstitutionRepresentativeInput!): AddInstitutionRepresentativePayload! @authorize(policy: "Write")
  addUserMethodDeveloper(input: AddUserMethodDeveloperInput!): AddUserMethodDeveloperPayload! @authorize(policy: "Write")
  addUserRole(input: AddUserRoleInput!): AddUserRolePayload! @authorize(policy: "ManageUser")
  changeInstitutionRepresentativeRole(input: ChangeInstitutionRepresentativeRoleInput!): ChangeInstitutionRepresentativeRolePayload! @authorize(policy: "Write")
  changeUserEmail(input: ChangeUserEmailInput!): ChangeUserEmailPayload! @authorize(policy: "ManageUser")
  changeUserPassword(input: ChangeUserPasswordInput!): ChangeUserPasswordPayload! @authorize(policy: "ManageUser")
  confirmComponentManufacturer(input: ConfirmComponentManufacturerInput!): ConfirmComponentManufacturerPayload! @authorize(policy: "Write")
  confirmInstitutionMethodDeveloper(input: ConfirmInstitutionMethodDeveloperInput!): ConfirmInstitutionMethodDeveloperPayload! @authorize(policy: "Write")
  confirmInstitutionRepresentative(input: ConfirmInstitutionRepresentativeInput!): ConfirmInstitutionRepresentativePayload! @authorize(policy: "Write")
  confirmUserEmail(input: ConfirmUserEmailInput!): ConfirmUserEmailPayload!
  confirmUserEmailChange(input: ConfirmUserEmailChangeInput!): ConfirmUserEmailChangePayload!
  confirmUserMethodDeveloper(input: ConfirmUserMethodDeveloperInput!): ConfirmUserMethodDeveloperPayload! @authorize(policy: "Write")
  createComponent(input: CreateComponentInput!): CreateComponentPayload! @authorize(policy: "Write")
  createDatabase(input: CreateDatabaseInput!): CreateDatabasePayload! @authorize(policy: "Write")
  createDataFormat(input: CreateDataFormatInput!): CreateDataFormatPayload! @authorize(policy: "Write")
  createInstitution(input: CreateInstitutionInput!): CreateInstitutionPayload! @authorize(policy: "Write")
  createMethod(input: CreateMethodInput!): CreateMethodPayload! @authorize(policy: "Write")
  deleteInstitution(input: DeleteInstitutionInput!): DeleteInstitutionPayload! @authorize(policy: "Write")
  deletePersonalUserData(input: DeletePersonalUserDataInput!): DeletePersonalUserDataPayload! @authorize(policy: "ManageUser")
  deleteUser(input: DeleteUserInput!): DeleteUserPayload! @authorize(policy: "ManageUser")
  disableUserTwoFactorAuthentication: DisableUserTwoFactorAuthenticationPayload! @authorize(policy: "ManageUser")
  enableUserTwoFactorAuthenticator(input: EnableUserTwoFactorAuthenticatorInput!): EnableUserTwoFactorAuthenticatorPayload! @authorize(policy: "ManageUser")
  forgetUserTwoFactorAuthenticationClient: ForgetUserTwoFactorAuthenticationClientPayload! @authorize(policy: "ManageUser")
  generateUserTwoFactorAuthenticatorSharedKeyAndQrCodeUri: GenerateUserTwoFactorAuthenticatorSharedKeyAndQrCodeUriPayload! @authorize(policy: "ManageUser")
  generateUserTwoFactorRecoveryCodes: GenerateUserTwoFactorRecoveryCodesPayload! @authorize(policy: "ManageUser")
  loginUser(input: LoginUserInput!): LoginUserPayload!
  loginUserWithRecoveryCode(input: LoginUserWithRecoveryCodeInput!): LoginUserWithRecoveryCodePayload!
  loginUserWithTwoFactorCode(input: LoginUserWithTwoFactorCodeInput!): LoginUserWithTwoFactorCodePayload!
  logoutUser: LogoutUserPayload! @authorize(policy: "ManageUser")
  registerUser(input: RegisterUserInput!): RegisterUserPayload!
  removeComponentAssembly(input: RemoveComponentAssemblyInput!): RemoveComponentAssemblyPayload! @authorize(policy: "Write")
  removeComponentGeneralization(input: RemoveComponentGeneralizationInput!): RemoveComponentGeneralizationPayload! @authorize(policy: "Write")
  removeComponentManufacturer(input: RemoveComponentManufacturerInput!): RemoveComponentManufacturerPayload! @authorize(policy: "Write")
  removeComponentVariant(input: RemoveComponentVariantInput!): RemoveComponentVariantPayload! @authorize(policy: "Write")
  removeInstitutionMethodDeveloper(input: RemoveInstitutionMethodDeveloperInput!): RemoveInstitutionMethodDeveloperPayload! @authorize(policy: "Write")
  removeInstitutionRepresentative(input: RemoveInstitutionRepresentativeInput!): RemoveInstitutionRepresentativePayload! @authorize(policy: "Write")
  removeUserMethodDeveloper(input: RemoveUserMethodDeveloperInput!): RemoveUserMethodDeveloperPayload! @authorize(policy: "Write")
  removeUserRole(input: RemoveUserRoleInput!): RemoveUserRolePayload! @authorize(policy: "ManageUser")
  requestUserPasswordReset(input: RequestUserPasswordResetInput!): RequestUserPasswordResetPayload!
  resendUserEmailConfirmation(input: ResendUserEmailConfirmationInput!): ResendUserEmailConfirmationPayload!
  resendUserEmailVerification: ResendUserEmailVerificationPayload! @authorize(policy: "ManageUser")
  resetUserPassword(input: ResetUserPasswordInput!): ResetUserPasswordPayload!
  resetUserTwoFactorAuthenticator: ResetUserTwoFactorAuthenticatorPayload! @authorize(policy: "ManageUser")
  setUserPassword(input: SetUserPasswordInput!): SetUserPasswordPayload! @authorize(policy: "ManageUser")
  setUserPhoneNumber(input: SetUserPhoneNumberInput!): SetUserPhoneNumberPayload! @authorize(policy: "ManageUser")
  updateComponent(input: UpdateComponentInput!): UpdateComponentPayload! @authorize(policy: "Write")
  updateComponentAssembly(input: UpdateComponentAssemblyInput!): UpdateComponentAssemblyPayload! @authorize(policy: "Write")
  updateDatabase(input: UpdateDatabaseInput!): UpdateDatabasePayload! @authorize(policy: "Write")
  updateDataFormat(input: UpdateDataFormatInput!): UpdateDataFormatPayload! @authorize(policy: "Write")
  updateInstitution(input: UpdateInstitutionInput!): UpdateInstitutionPayload! @authorize(policy: "Write")
  updateMethod(input: UpdateMethodInput!): UpdateMethodPayload! @authorize(policy: "Write")
  verifyDatabase(input: VerifyDatabaseInput!): VerifyDatabasePayload! @authorize(policy: "Write")
  verifyInstitution(input: VerifyInstitutionInput!): VerifyInstitutionPayload! @authorize(policy: "Write")
}

type NamedMethodArgument {
  name: String!
  value: Any!
}

type Numeration {
  mainNumber: String!
  prefix: String
  suffix: String
}

type OpenEndedDateTimeRange {
  from: DateTime
  to: DateTime
}

type OpenIdConnectApplication {
  authorizations: [OpenIdConnectAuthorization!]!
  clientId: String
  clientSecret: String
  concurrencyToken: String
  consentType: String
  displayName: String
  displayNames: String
  id: String
  permissions: String
  postLogoutRedirectUris: String
  properties: String
  redirectUris: String
  requirements: String
  tokens: [OpenIdConnectToken!]!
  type: String
}

type OpenIdConnectAuthorization {
  application: OpenIdConnectApplication
  concurrencyToken: String
  creationDate: DateTime
  id: String
  properties: String
  scopes: String
  status: String
  subject: String
  tokens: [OpenIdConnectToken!]!
  type: String
}

type OpenIdConnectScope {
  concurrencyToken: String
  description: String
  descriptions: String
  displayName: String
  displayNames: String
  id: String
  name: String
  properties: String
  resources: String
}

type OpenIdConnectToken {
  application: OpenIdConnectApplication
  authorization: OpenIdConnectAuthorization
  concurrencyToken: String
  creationDate: DateTime
  expirationDate: DateTime
  id: String
  payload: String
  properties: String
  redemptionDate: DateTime
  referenceId: String
  status: String
  subject: String
  type: String
}

type OpticalData implements Data {
  appliedMethod: AppliedMethod!
  component: Component
  componentId: Uuid!
  createdAt: DateTime!
  creator: Institution
  creatorId: Uuid!
  description: String
  id: String!
  infraredEmittances: [Float!]!
  locale: String!
  name: String
  nearnormalHemisphericalSolarReflectances: [Float!]!
  nearnormalHemisphericalSolarTransmittances: [Float!]!
  nearnormalHemisphericalVisibleReflectances: [Float!]!
  nearnormalHemisphericalVisibleTransmittances: [Float!]!
  resources: [GetHttpsResource!]!
  resourceTree: GetHttpsResourceTree!
  timestamp: DateTime!
  uuid: Uuid!
  warnings: [String!]!
}

type OpticalDataConnection {
  edges: [OpticalDataEdge!]!
  nodes: [OpticalData!]!
  timestamp: DateTime!
  totalCount: NonNegativeInt
}

type OpticalDataEdge {
  cursor: String!
  node: OpticalData!
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"A connection to a list of items."
type PendingDatabasesConnection {
  "A list of edges."
  edges: [PendingDatabasesEdge!]
  "A flattened list of the nodes."
  nodes: [Database!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type PendingDatabasesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Database!
}

"A connection to a list of items."
type PendingInstitutionsConnection {
  "A list of edges."
  edges: [PendingInstitutionsEdge!]
  "A flattened list of the nodes."
  nodes: [Institution!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type PendingInstitutionsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Institution!
}

type PhotovoltaicData implements Data {
  appliedMethod: AppliedMethod!
  component: Component
  componentId: Uuid!
  createdAt: DateTime!
  creator: Institution
  creatorId: Uuid!
  description: String
  id: String!
  locale: String!
  name: String
  resources: [GetHttpsResource!]!
  resourceTree: GetHttpsResourceTree!
  timestamp: DateTime!
  uuid: Uuid!
  warnings: [String!]!
}

type PhotovoltaicDataConnection {
  edges: [PhotovoltaicDataEdge!]!
  nodes: [PhotovoltaicData!]!
  timestamp: DateTime!
  totalCount: NonNegativeInt
}

type PhotovoltaicDataEdge {
  cursor: String!
  node: PhotovoltaicData!
}

type Publication implements Reference {
  abstract: String
  "The website arXiv.org is a free and open-access archive for publications. The arXiv identifier can be used to define a publication."
  arXiv: String
  authors: [String!]
  "The Digital Object Identifier (DOI) is a very important persistent identifier for publications. It MUST be defined here if it is available for a publication."
  doi: String
  "Referenced section"
  section: String
  title: String
  "A Uniform Resource Name (URN) can be used to define a publication. TODO: Improve the regex pattern to further restrict the string."
  urn: String
  "If a persistent identifiert like DOI is defined above, this webAdress can define a convenient web address to access the publication. However, if no persistent identifier exist, this web address is the only identifier of this publication. In this case, it is important to choose a web address with a high probability to persist long."
  webAddress: Url
}

type Query {
  component(uuid: Uuid!): Component
  components("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [ComponentSortInput!] where: ComponentFilterInput): ComponentsConnection
  currentUser: User
  database(uuid: Uuid!): Database
  databases("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [DatabaseSortInput!] where: DatabaseFilterInput): DatabasesConnection
  dataFormat(uuid: Uuid!): DataFormat
  dataFormats("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [DataFormatSortInput!] where: DataFormatFilterInput): DataFormatsConnection
  institution(uuid: Uuid!): Institution
  institutions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [InstitutionSortInput!] where: InstitutionFilterInput): InstitutionsConnection
  method(uuid: Uuid!): Method
  methods("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [MethodSortInput!] where: MethodFilterInput): MethodsConnection
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  openIdConnectApplications: [OpenIdConnectApplication!]!
  openIdConnectAuthorizations: [OpenIdConnectAuthorization!]!
  openIdConnectScopes: [OpenIdConnectScope!]!
  openIdConnectTokens: [OpenIdConnectToken!]!
  pendingDatabases("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [DatabaseSortInput!] where: DatabaseFilterInput): PendingDatabasesConnection
  pendingInstitutions("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [InstitutionSortInput!] where: InstitutionFilterInput): PendingInstitutionsConnection
  user(uuid: Uuid!): User
  users("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [UserSortInput!]): UsersConnection
}

type RegisterUserError {
  code: RegisterUserErrorCode!
  message: String!
  path: [String!]!
}

type RegisterUserPayload {
  errors: [RegisterUserError!]
  query: Query!
  user: User
}

type RemoveComponentAssemblyError {
  code: RemoveComponentAssemblyErrorCode!
  message: String!
  path: [String!]!
}

type RemoveComponentAssemblyPayload {
  assembledComponent: Component
  errors: [RemoveComponentAssemblyError!]
  partComponent: Component
  query: Query!
}

type RemoveComponentGeneralizationError {
  code: RemoveComponentGeneralizationErrorCode!
  message: String!
  path: [String!]!
}

type RemoveComponentGeneralizationPayload {
  concreteComponent: Component
  errors: [RemoveComponentGeneralizationError!]
  generalComponent: Component
  query: Query!
}

type RemoveComponentManufacturerError {
  code: RemoveComponentManufacturerErrorCode!
  message: String!
  path: [String!]!
}

type RemoveComponentManufacturerPayload {
  component: Component
  errors: [RemoveComponentManufacturerError!]
  institution: Institution
  query: Query!
}

type RemoveComponentVariantError {
  code: RemoveComponentVariantErrorCode!
  message: String!
  path: [String!]!
}

type RemoveComponentVariantPayload {
  errors: [RemoveComponentVariantError!]
  oneComponent: Component
  otherComponent: Component
  query: Query!
}

type RemoveInstitutionMethodDeveloperError {
  code: RemoveInstitutionMethodDeveloperErrorCode!
  message: String!
  path: [String!]!
}

type RemoveInstitutionMethodDeveloperPayload {
  developedMethodEdge: InstitutionDevelopedMethodEdge
  errors: [RemoveInstitutionMethodDeveloperError!]
  methodDeveloperEdge: InstitutionMethodDeveloperEdge
  query: Query!
}

type RemoveInstitutionRepresentativeError {
  code: RemoveInstitutionRepresentativeErrorCode!
  message: String!
  path: [String!]!
}

type RemoveInstitutionRepresentativePayload {
  errors: [RemoveInstitutionRepresentativeError!]
  institution: Institution
  query: Query!
  user: User
}

type RemoveUserMethodDeveloperError {
  code: RemoveUserMethodDeveloperErrorCode!
  message: String!
  path: [String!]!
}

type RemoveUserMethodDeveloperPayload {
  developedMethodEdge: UserDevelopedMethodEdge
  errors: [RemoveUserMethodDeveloperError!]
  methodDeveloperEdge: UserMethodDeveloperEdge
  query: Query!
}

type RemoveUserRoleError {
  code: RemoveUserRoleErrorCode!
  message: String!
  path: [String!]!
}

type RemoveUserRolePayload {
  errors: [RemoveUserRoleError!]
  query: Query!
  user: User
}

type RequestUserPasswordResetError {
  code: RequestUserPasswordResetErrorCode!
  message: String!
  path: [String!]!
}

type RequestUserPasswordResetPayload {
  errors: [RequestUserPasswordResetError!]
  query: Query!
}

type ResendUserEmailConfirmationError {
  code: ResendUserEmailConfirmationErrorCode!
  message: String!
  path: [String!]!
}

type ResendUserEmailConfirmationPayload {
  errors: [ResendUserEmailConfirmationError!]
  query: Query!
}

type ResendUserEmailVerificationError {
  code: ResendUserEmailVerificationErrorCode!
  message: String!
  path: [String!]!
}

type ResendUserEmailVerificationPayload {
  errors: [ResendUserEmailVerificationError!]
  query: Query!
  user: User
}

type ResetUserPasswordError {
  code: ResetUserPasswordErrorCode!
  message: String!
  path: [String!]!
}

type ResetUserPasswordPayload {
  errors: [ResetUserPasswordError!]
  query: Query!
}

type ResetUserTwoFactorAuthenticatorError {
  code: ResetUserTwoFactorAuthenticatorErrorCode!
  message: String!
  path: [String!]!
}

type ResetUserTwoFactorAuthenticatorPayload {
  errors: [ResetUserTwoFactorAuthenticatorError!]
  query: Query!
  user: User
}

type ResponseApproval {
  keyFingerprint: String!
  query: String!
  response: String!
  signature: String!
  timestamp: DateTime!
}

type SetUserPasswordError {
  code: SetUserPasswordErrorCode!
  message: String!
  path: [String!]!
}

type SetUserPasswordPayload {
  errors: [SetUserPasswordError!]
  query: Query!
  user: User
}

type SetUserPhoneNumberError {
  code: SetUserPhoneNumberErrorCode!
  message: String!
  path: [String!]!
}

type SetUserPhoneNumberPayload {
  errors: [SetUserPhoneNumberError!]
  query: Query!
  user: User
}

"`ISO 52022` is an example of the abbreviation of a standardizer and the main number of the identifier."
type Standard implements Reference {
  abstract: String
  locator: Url
  numeration: Numeration!
  "The section of the standard to which the reference refers to."
  section: String
  standardizers: [Standardizer!]!
  title: String
  "It is important to define the year in which the standard was issued because there can be relevant updates of one standard."
  year: Int
}

type ToTreeVertexAppliedConversionMethod {
  arguments: [NamedMethodArgument!]!
  method: Method
  methodId: Uuid!
  sourceName: String!
}

type TwoFactorAuthentication {
  hasAuthenticator: Boolean!
  isEnabled: Boolean!
  isMachineRemembered: Boolean!
  recoveryCodesLeftCount: Int!
}

type UpdateComponentAssemblyError {
  code: UpdateComponentAssemblyErrorCode!
  message: String!
  path: [String!]!
}

type UpdateComponentAssemblyPayload {
  assembledOfEdge: ComponentAssembledOfEdge
  errors: [UpdateComponentAssemblyError!]
  partOfEdge: ComponentPartOfEdge
  query: Query!
}

type UpdateComponentError {
  code: UpdateComponentErrorCode!
  message: String!
  path: [String!]!
}

type UpdateComponentPayload {
  component: Component
  errors: [UpdateComponentError!]
  query: Query!
}

type UpdateDataFormatError {
  code: UpdateDataFormatErrorCode!
  message: String!
  path: [String!]!
}

type UpdateDataFormatPayload {
  dataFormat: DataFormat
  errors: [UpdateDataFormatError!]
  query: Query!
}

type UpdateDatabaseError {
  code: UpdateDatabaseErrorCode!
  message: String!
  path: [String!]!
}

type UpdateDatabasePayload {
  database: Database
  errors: [UpdateDatabaseError!]
  query: Query!
}

type UpdateInstitutionError {
  code: UpdateInstitutionErrorCode!
  message: String!
  path: [String!]!
}

type UpdateInstitutionPayload {
  errors: [UpdateInstitutionError!]
  institution: Institution
  query: Query!
}

type UpdateMethodError {
  code: UpdateMethodErrorCode!
  message: String!
  path: [String!]!
}

type UpdateMethodPayload {
  errors: [UpdateMethodError!]
  method: Method
  query: Query!
}

type User implements Node & Stakeholder {
  canCurrentUserDeleteUser: Boolean!
  developedMethods(pending: Boolean! = false): UserDevelopedMethodConnection!
  email: String
  hasPassword: Boolean
  id: ID!
  isEmailConfirmed: Boolean
  isPhoneNumberConfirmed: Boolean
  "Full name"
  name: String!
  phoneNumber: String
  postalAddress: String
  representedInstitutions(pending: Boolean! = false): UserRepresentedInstitutionConnection!
  roles: [UserRole!]
  rolesCurrentUserCanAdd: [UserRole!]!
  rolesCurrentUserCanRemove: [UserRole!]!
  twoFactorAuthentication: TwoFactorAuthentication
  uuid: Uuid!
  websiteLocator: Url
}

type UserDevelopedMethodConnection {
  canCurrentUserConfirmEdge: Boolean!
  edges: [UserDevelopedMethodEdge!]!
}

type UserDevelopedMethodEdge {
  node: Method!
}

type UserMethodDeveloperEdge {
  canCurrentUserConfirmEdge: Boolean!
  canCurrentUserRemoveEdge: Boolean!
  node: User!
}

type UserRepresentedInstitutionConnection {
  canCurrentUserConfirmEdge: Boolean!
  edges: [UserRepresentedInstitutionEdge!]!
}

type UserRepresentedInstitutionEdge {
  node: Institution!
  role: InstitutionRepresentativeRole!
}

"A connection to a list of items."
type UsersConnection {
  "A list of edges."
  edges: [UsersEdge!]
  "A flattened list of the nodes."
  nodes: [User!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type UsersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User!
}

type VerifyDatabaseError {
  code: VerifyDatabaseErrorCode!
  message: String!
  path: [String!]!
}

type VerifyDatabasePayload {
  database: Database
  errors: [VerifyDatabaseError!]
  query: Query!
}

type VerifyInstitutionError {
  code: VerifyInstitutionErrorCode!
  message: String!
  path: [String!]!
}

type VerifyInstitutionPayload {
  errors: [VerifyInstitutionError!]
  institution: Institution
  query: Query!
}

input AddComponentAssemblyInput {
  assembledComponentId: Uuid!
  index: Byte
  partComponentId: Uuid!
  primeSurface: PrimeSurface
}

input AddComponentGeneralizationInput {
  concreteComponentId: Uuid!
  generalComponentId: Uuid!
}

input AddComponentManufacturerInput {
  componentId: Uuid!
  institutionId: Uuid!
}

input AddComponentVariantInput {
  oneComponentId: Uuid!
  otherComponentId: Uuid!
}

input AddInstitutionMethodDeveloperInput {
  institutionId: Uuid!
  methodId: Uuid!
}

input AddInstitutionRepresentativeInput {
  institutionId: Uuid!
  role: InstitutionRepresentativeRole!
  userId: Uuid!
}

input AddUserMethodDeveloperInput {
  methodId: Uuid!
  userId: Uuid!
}

input AddUserRoleInput {
  role: UserRole!
  userId: Uuid!
}

input CalorimetricDataPropositionInput {
  and: [CalorimetricDataPropositionInput!]
  componentId: UuidPropositionInput
  gValues: FloatsPropositionInput
  not: CalorimetricDataPropositionInput
  or: [CalorimetricDataPropositionInput!]
  resources: GetHttpsResourcesPropositionInput
  uValues: FloatsPropositionInput
}

input ChangeInstitutionRepresentativeRoleInput {
  institutionId: Uuid!
  role: InstitutionRepresentativeRole!
  userId: Uuid!
}

input ChangeUserEmailInput {
  newEmail: String!
}

input ChangeUserPasswordInput {
  currentPassword: String!
  newPassword: String!
  newPasswordConfirmation: String!
}

input CielabColorPropositionInput {
  aStar: FloatPropositionInput
  bStar: FloatPropositionInput
  lStar: FloatPropositionInput
}

input CielabColorsPropositionInput {
  all: CielabColorPropositionInput
  none: CielabColorPropositionInput
  some: CielabColorPropositionInput
}

input ClosedIntervalInput {
  lowerBound: Float!
  upperBound: Float!
}

input ComponentCategoryOperationFilterInput {
  eq: ComponentCategory
  neq: ComponentCategory
  in: [ComponentCategory!]
  nin: [ComponentCategory!]
}

input ComponentFilterInput {
  and: [ComponentFilterInput!]
  or: [ComponentFilterInput!]
  id: UuidOperationFilterInput
  name: StringOperationFilterInput
  abbreviation: StringOperationFilterInput
  description: StringOperationFilterInput
  categories: ListComponentCategoryOperationFilterInput
  partOf: ListComponentFilterTypeFilterInput
  parts: ListComponentFilterTypeFilterInput
  concretizations: ListComponentFilterTypeFilterInput
  generalizations: ListComponentFilterTypeFilterInput
  variants: ListComponentFilterTypeFilterInput
  manufacturers: ListInstitutionFilterTypeFilterInput
}

input ComponentSortInput {
  name: SortEnumType
  abbreviation: SortEnumType
  description: SortEnumType
  availability: SortEnumType
  id: SortEnumType
  version: SortEnumType
}

input ConfirmComponentManufacturerInput {
  componentId: Uuid!
  institutionId: Uuid!
}

input ConfirmInstitutionMethodDeveloperInput {
  institutionId: Uuid!
  methodId: Uuid!
}

input ConfirmInstitutionRepresentativeInput {
  institutionId: Uuid!
  userId: Uuid!
}

input ConfirmUserEmailChangeInput {
  confirmationCode: String!
  currentEmail: String!
  newEmail: String!
}

input ConfirmUserEmailInput {
  confirmationCode: String!
  email: String!
}

input ConfirmUserMethodDeveloperInput {
  methodId: Uuid!
  userId: Uuid!
}

input CreateComponentInput {
  abbreviation: String
  availability: OpenEndedDateTimeRangeInput
  categories: [ComponentCategory!]!
  description: String!
  manufacturerId: Uuid!
  name: String!
}

input CreateDataFormatInput {
  description: String!
  extension: String
  managerId: Uuid!
  mediaType: String!
  name: String!
  publication: CreatePublicationInput
  schemaLocator: Url
  standard: CreateStandardInput
}

input CreateDatabaseInput {
  description: String!
  locator: Url!
  name: String!
  operatorId: Uuid!
}

input CreateInstitutionInput {
  abbreviation: String
  description: String!
  managerId: Uuid
  name: String!
  ownerIds: [Uuid!]!
  publicKey: String
  websiteLocator: Url
}

input CreateMethodInput {
  availability: OpenEndedDateTimeRangeInput
  calculationLocator: Url
  categories: [MethodCategory!]!
  description: String!
  institutionDeveloperIds: [Uuid!]!
  managerId: Uuid!
  name: String!
  publication: CreatePublicationInput
  standard: CreateStandardInput
  userDeveloperIds: [Uuid!]!
  validity: OpenEndedDateTimeRangeInput
}

input CreateNumerationInput {
  mainNumber: String!
  prefix: String
  suffix: String
}

input CreatePublicationInput {
  abstract: String
  arXiv: String
  authors: [String!]
  doi: String
  section: String
  title: String
  urn: String
  webAddress: Url
}

input CreateStandardInput {
  abstract: String
  locator: Url
  numeration: CreateNumerationInput!
  section: String
  standardizers: [Standardizer!]!
  title: String
  year: Int
}

input DataFormatFilterInput {
  and: [DataFormatFilterInput!]
  or: [DataFormatFilterInput!]
  id: UuidOperationFilterInput
  name: StringOperationFilterInput
  extension: StringOperationFilterInput
  description: StringOperationFilterInput
  mediaType: StringOperationFilterInput
  schemaLocator: UrlOperationFilterInput
  manager: InstitutionFilterInput
}

input DataFormatSortInput {
  name: SortEnumType
  extension: SortEnumType
  description: SortEnumType
  mediaType: SortEnumType
  schemaLocator: UriSortInput
  standard: StandardSortInput
  publication: PublicationSortInput
  reference: IReferenceSortInput
  managerId: SortEnumType
  manager: InstitutionSortInput
  id: SortEnumType
  version: SortEnumType
}

input DataPropositionInput {
  and: [DataPropositionInput!]
  cielabColors: CielabColorsPropositionInput
  colorRenderingIndices: FloatsPropositionInput
  componentId: UuidPropositionInput
  gValues: FloatsPropositionInput
  infraredEmittances: FloatsPropositionInput
  nearnormalHemisphericalSolarReflectances: FloatsPropositionInput
  nearnormalHemisphericalSolarTransmittances: FloatsPropositionInput
  nearnormalHemisphericalVisibleReflectances: FloatsPropositionInput
  nearnormalHemisphericalVisibleTransmittances: FloatsPropositionInput
  not: DataPropositionInput
  or: [DataPropositionInput!]
  resources: GetHttpsResourcesPropositionInput
  uValues: FloatsPropositionInput
}

input DatabaseFilterInput {
  and: [DatabaseFilterInput!]
  or: [DatabaseFilterInput!]
  id: UuidOperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  locator: UrlOperationFilterInput
  operator: InstitutionFilterInput
}

input DatabaseSortInput {
  name: SortEnumType
  description: SortEnumType
  locator: UriSortInput
  verificationState: SortEnumType
  verificationCode: SortEnumType
  operatorId: SortEnumType
  operator: InstitutionSortInput
  id: SortEnumType
  version: SortEnumType
}

input DeleteInstitutionInput {
  institutionId: Uuid!
}

input DeletePersonalUserDataInput {
  password: String
}

input DeleteUserInput {
  userId: Uuid!
}

input EnableUserTwoFactorAuthenticatorInput {
  verificationCode: String!
}

input FileMetaInformationPropositionInput {
  dataFormatId: UuidPropositionInput
}

input FilesMetaInformationPropositionInput {
  all: FileMetaInformationPropositionInput
  none: FileMetaInformationPropositionInput
  some: FileMetaInformationPropositionInput
}

input FloatPropositionInput {
  equalTo: Float
  greaterThanOrEqualTo: Float
  inClosedInterval: ClosedIntervalInput
  lessThanOrEqualTo: Float
}

input FloatsPropositionInput {
  all: FloatPropositionInput
  none: FloatPropositionInput
  some: FloatPropositionInput
}

input GetHttpsResourcePropositionInput {
  archivedFilesMetaInformation: FilesMetaInformationPropositionInput
  dataFormatId: UuidPropositionInput
}

input GetHttpsResourcesPropositionInput {
  all: GetHttpsResourcePropositionInput
  none: GetHttpsResourcePropositionInput
  some: GetHttpsResourcePropositionInput
}

input HygrothermalDataPropositionInput {
  and: [HygrothermalDataPropositionInput!]
  componentId: UuidPropositionInput
  not: HygrothermalDataPropositionInput
  or: [HygrothermalDataPropositionInput!]
  resources: GetHttpsResourcesPropositionInput
}

input IReferenceSortInput {
  title: SortEnumType
  abstract: SortEnumType
  section: SortEnumType
}

input InstitutionFilterInput {
  and: [InstitutionFilterInput!]
  or: [InstitutionFilterInput!]
  id: UuidOperationFilterInput
  name: StringOperationFilterInput
  abbreviation: StringOperationFilterInput
  description: StringOperationFilterInput
  websiteLocator: UrlOperationFilterInput
  state: InstitutionStateOperationFilterInput
  developedMethods: ListMethodFilterTypeFilterInput
  managedMethods: ListMethodFilterTypeFilterInput
  managedDataFormats: ListDataFormatFilterTypeFilterInput
  manufacturedComponents: ListComponentFilterTypeFilterInput
  operatedDatabases: ListDatabaseFilterTypeFilterInput
  manager: InstitutionFilterInput
  managedInstitutions: ListInstitutionFilterTypeFilterInput
  representatives: ListUserFilterTypeFilterInput
}

input InstitutionSortInput {
  name: SortEnumType
  abbreviation: SortEnumType
  description: SortEnumType
  websiteLocator: UriSortInput
  publicKey: SortEnumType
  state: SortEnumType
  managerId: SortEnumType
  manager: InstitutionSortInput
  id: SortEnumType
  version: SortEnumType
}

input InstitutionStateOperationFilterInput {
  eq: InstitutionState
  neq: InstitutionState
  in: [InstitutionState!]
  nin: [InstitutionState!]
}

input ListComponentCategoryOperationFilterInput {
  all: ComponentCategoryOperationFilterInput
  none: ComponentCategoryOperationFilterInput
  some: ComponentCategoryOperationFilterInput
  any: Boolean
}

input ListComponentFilterTypeFilterInput {
  all: ComponentFilterInput
  none: ComponentFilterInput
  some: ComponentFilterInput
  any: Boolean
}

input ListDataFormatFilterTypeFilterInput {
  all: DataFormatFilterInput
  none: DataFormatFilterInput
  some: DataFormatFilterInput
  any: Boolean
}

input ListDatabaseFilterTypeFilterInput {
  all: DatabaseFilterInput
  none: DatabaseFilterInput
  some: DatabaseFilterInput
  any: Boolean
}

input ListInstitutionFilterTypeFilterInput {
  all: InstitutionFilterInput
  none: InstitutionFilterInput
  some: InstitutionFilterInput
  any: Boolean
}

input ListMethodCategoryOperationFilterInput {
  all: MethodCategoryOperationFilterInput
  none: MethodCategoryOperationFilterInput
  some: MethodCategoryOperationFilterInput
  any: Boolean
}

input ListMethodFilterTypeFilterInput {
  all: MethodFilterInput
  none: MethodFilterInput
  some: MethodFilterInput
  any: Boolean
}

input ListUserFilterTypeFilterInput {
  all: UserFilterInput
  none: UserFilterInput
  some: UserFilterInput
  any: Boolean
}

input LoginUserInput {
  email: String!
  password: String!
}

input LoginUserWithRecoveryCodeInput {
  recoveryCode: String!
}

input LoginUserWithTwoFactorCodeInput {
  authenticatorCode: String!
  rememberMachine: Boolean!
}

input MethodCategoryOperationFilterInput {
  eq: MethodCategory
  neq: MethodCategory
  in: [MethodCategory!]
  nin: [MethodCategory!]
}

input MethodFilterInput {
  and: [MethodFilterInput!]
  or: [MethodFilterInput!]
  id: UuidOperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  calculationLocator: UrlOperationFilterInput
  categories: ListMethodCategoryOperationFilterInput
  institutionDevelopers: ListInstitutionFilterTypeFilterInput
  userDevelopers: ListUserFilterTypeFilterInput
  manager: InstitutionFilterInput
}

input MethodSortInput {
  name: SortEnumType
  description: SortEnumType
  standard: StandardSortInput
  publication: PublicationSortInput
  reference: IReferenceSortInput
  validity: SortEnumType
  availability: SortEnumType
  calculationLocator: UriSortInput
  managerId: SortEnumType
  manager: InstitutionSortInput
  id: SortEnumType
  version: SortEnumType
}

input NumerationSortInput {
  prefix: SortEnumType
  mainNumber: SortEnumType
  suffix: SortEnumType
}

input OpenEndedDateTimeRangeInput {
  from: DateTime
  to: DateTime
}

input OpticalDataPropositionInput {
  and: [OpticalDataPropositionInput!]
  cielabColors: CielabColorsPropositionInput
  colorRenderingIndices: FloatsPropositionInput
  componentId: UuidPropositionInput
  infraredEmittances: FloatsPropositionInput
  nearnormalHemisphericalSolarReflectances: FloatsPropositionInput
  nearnormalHemisphericalSolarTransmittances: FloatsPropositionInput
  nearnormalHemisphericalVisibleReflectances: FloatsPropositionInput
  nearnormalHemisphericalVisibleTransmittances: FloatsPropositionInput
  not: OpticalDataPropositionInput
  or: [OpticalDataPropositionInput!]
  resources: GetHttpsResourcesPropositionInput
}

input PhotovoltaicDataPropositionInput {
  and: [PhotovoltaicDataPropositionInput!]
  componentId: UuidPropositionInput
  not: PhotovoltaicDataPropositionInput
  or: [PhotovoltaicDataPropositionInput!]
  resources: GetHttpsResourcesPropositionInput
}

input PublicationSortInput {
  title: SortEnumType
  abstract: SortEnumType
  "Referenced section"
  section: SortEnumType
  "The Digital Object Identifier (DOI) is a very important persistent identifier for publications. It MUST be defined here if it is available for a publication."
  doi: SortEnumType
  "The website arXiv.org is a free and open-access archive for publications. The arXiv identifier can be used to define a publication."
  arXiv: SortEnumType
  "A Uniform Resource Name (URN) can be used to define a publication. TODO: Improve the regex pattern to further restrict the string."
  urn: SortEnumType
  "If a persistent identifiert like DOI is defined above, this webAdress can define a convenient web address to access the publication. However, if no persistent identifier exist, this web address is the only identifier of this publication. In this case, it is important to choose a web address with a high probability to persist long."
  webAddress: UriSortInput
}

input RegisterUserInput {
  email: String!
  name: String!
  password: String!
  passwordConfirmation: String!
  returnTo: Url
}

input RemoveComponentAssemblyInput {
  assembledComponentId: Uuid!
  partComponentId: Uuid!
}

input RemoveComponentGeneralizationInput {
  concreteComponentId: Uuid!
  generalComponentId: Uuid!
}

input RemoveComponentManufacturerInput {
  componentId: Uuid!
  institutionId: Uuid!
}

input RemoveComponentVariantInput {
  oneComponentId: Uuid!
  otherComponentId: Uuid!
}

input RemoveInstitutionMethodDeveloperInput {
  institutionId: Uuid!
  methodId: Uuid!
}

input RemoveInstitutionRepresentativeInput {
  institutionId: Uuid!
  userId: Uuid!
}

input RemoveUserMethodDeveloperInput {
  methodId: Uuid!
  userId: Uuid!
}

input RemoveUserRoleInput {
  role: UserRole!
  userId: Uuid!
}

input RequestUserPasswordResetInput {
  email: String!
  returnTo: Url
}

input ResendUserEmailConfirmationInput {
  email: String!
}

input ResetUserPasswordInput {
  email: String!
  password: String!
  passwordConfirmation: String!
  resetCode: String!
}

input SetUserPasswordInput {
  password: String!
  passwordConfirmation: String!
}

input SetUserPhoneNumberInput {
  phoneNumber: String!
}

"`ISO 52022` is an example of the abbreviation of a standardizer and the main number of the identifier."
input StandardSortInput {
  title: SortEnumType
  abstract: SortEnumType
  "The section of the standard to which the reference refers to."
  section: SortEnumType
  "It is important to define the year in which the standard was issued because there can be relevant updates of one standard."
  year: SortEnumType
  numeration: NumerationSortInput
  locator: UriSortInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UpdateComponentAssemblyInput {
  assembledComponentId: Uuid!
  index: Byte
  partComponentId: Uuid!
  primeSurface: PrimeSurface
}

input UpdateComponentInput {
  abbreviation: String
  availability: OpenEndedDateTimeRangeInput
  categories: [ComponentCategory!]!
  componentId: Uuid!
  description: String!
  name: String!
}

input UpdateDataFormatInput {
  dataFormatId: Uuid!
  description: String!
  extension: String
  mediaType: String!
  name: String!
  publication: UpdatePublicationInput
  schemaLocator: Url
  standard: UpdateStandardInput
}

input UpdateDatabaseInput {
  databaseId: Uuid!
  description: String!
  locator: Url!
  name: String!
}

input UpdateInstitutionInput {
  abbreviation: String
  description: String!
  institutionId: Uuid!
  name: String!
  publicKey: String
  websiteLocator: Url
}

input UpdateMethodInput {
  availability: OpenEndedDateTimeRangeInput
  calculationLocator: Url
  categories: [MethodCategory!]!
  description: String!
  methodId: Uuid!
  name: String!
  publication: UpdatePublicationInput
  standard: UpdateStandardInput
  validity: OpenEndedDateTimeRangeInput
}

input UpdateNumerationInput {
  mainNumber: String!
  prefix: String
  suffix: String
}

input UpdatePublicationInput {
  abstract: String
  arXiv: String
  authors: [String!]
  doi: String
  section: String
  title: String
  urn: String
  webAddress: Url
}

input UpdateStandardInput {
  abstract: String
  locator: Url
  numeration: UpdateNumerationInput!
  section: String
  standardizers: [Standardizer!]!
  title: String
  year: Int
}

input UriSortInput {
  absolutePath: SortEnumType
  absoluteUri: SortEnumType
  localPath: SortEnumType
  authority: SortEnumType
  hostNameType: SortEnumType
  isDefaultPort: SortEnumType
  isFile: SortEnumType
  isLoopback: SortEnumType
  pathAndQuery: SortEnumType
  isUnc: SortEnumType
  host: SortEnumType
  port: SortEnumType
  query: SortEnumType
  fragment: SortEnumType
  scheme: SortEnumType
  originalString: SortEnumType
  dnsSafeHost: SortEnumType
  idnHost: SortEnumType
  isAbsoluteUri: SortEnumType
  userEscaped: SortEnumType
  userInfo: SortEnumType
}

input UrlOperationFilterInput {
  eq: Url
  neq: Url
  in: [Url]
  nin: [Url]
  gt: Url
  ngt: Url
  gte: Url
  ngte: Url
  lt: Url
  nlt: Url
  lte: Url
  nlte: Url
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  id: UuidOperationFilterInput
  developedMethods: ListMethodFilterTypeFilterInput
  representedInstitutions: ListInstitutionFilterTypeFilterInput
}

input UserSortInput {
  "Full name"
  name: SortEnumType
  postalAddress: SortEnumType
  websiteLocator: UriSortInput
  version: SortEnumType
  id: SortEnumType
  userName: SortEnumType
  normalizedUserName: SortEnumType
  email: SortEnumType
  normalizedEmail: SortEnumType
  emailConfirmed: SortEnumType
  passwordHash: SortEnumType
  securityStamp: SortEnumType
  concurrencyStamp: SortEnumType
  phoneNumber: SortEnumType
  phoneNumberConfirmed: SortEnumType
  twoFactorEnabled: SortEnumType
  lockoutEnd: SortEnumType
  lockoutEnabled: SortEnumType
  accessFailedCount: SortEnumType
}

input UuidOperationFilterInput {
  eq: Uuid
  neq: Uuid
  in: [Uuid]
  nin: [Uuid]
  gt: Uuid
  ngt: Uuid
  gte: Uuid
  ngte: Uuid
  lt: Uuid
  nlt: Uuid
  lte: Uuid
  nlte: Uuid
}

input UuidPropositionInput {
  equalTo: Uuid
}

input VerifyDatabaseInput {
  databaseId: Uuid!
}

input VerifyInstitutionInput {
  institutionId: Uuid!
}

enum AddComponentAssemblyErrorCode {
  UNKNOWN
  UNKNOWN_ASSEMBLED_COMPONENT
  UNKNOWN_PART_COMPONENT
  DUPLICATE
  UNAUTHORIZED
}

enum AddComponentGeneralizationErrorCode {
  UNKNOWN
  UNKNOWN_GENERAL_COMPONENT
  UNKNOWN_CONCRETE_COMPONENT
  DUPLICATE
  UNAUTHORIZED
}

enum AddComponentManufacturerErrorCode {
  UNKNOWN
  UNKNOWN_COMPONENT
  UNKNOWN_INSTITUTION
  UNAUTHORIZED
  DUPLICATE
}

enum AddComponentVariantErrorCode {
  UNKNOWN
  UNKNOWN_ONE_COMPONENT
  UNKNOWN_OTHER_COMPONENT
  DUPLICATE
  UNAUTHORIZED
}

enum AddInstitutionMethodDeveloperErrorCode {
  UNKNOWN
  UNKNOWN_METHOD
  UNKNOWN_INSTITUTION
  UNAUTHORIZED
  DUPLICATE
}

enum AddInstitutionRepresentativeErrorCode {
  UNKNOWN
  UNKNOWN_INSTITUTION
  UNKNOWN_USER
  DUPLICATE
  UNAUTHORIZED
}

enum AddUserMethodDeveloperErrorCode {
  UNKNOWN
  UNKNOWN_METHOD
  UNKNOWN_USER
  UNAUTHORIZED
  DUPLICATE
}

enum AddUserRoleErrorCode {
  UNKNOWN
  UNKNOWN_USER
  UNAUTHORIZED
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum ChangeInstitutionRepresentativeRoleErrorCode {
  UNKNOWN
  UNKNOWN_INSTITUTION
  UNKNOWN_USER
  UNAUTHORIZED
  UNKNOWN_REPRESENTATIVE
  LAST_OWNER
}

enum ChangeUserEmailErrorCode {
  UNKNOWN
  UNKNOWN_USER
  UNCHANGED_EMAIL
  UNKNOWN_CURRENT_EMAIL
}

enum ChangeUserPasswordErrorCode {
  UNKNOWN
  UNKNOWN_USER
  NO_PASSWORD
  PASSWORD_CONFIRMATION_MISMATCH
  PASSWORD_REQUIRES_DIGIT
  PASSWORD_REQUIRES_LOWER
  PASSWORD_REQUIRES_NON_ALPHANUMERIC
  PASSWORD_REQUIRES_UPPER
  PASSWORD_TOO_SHORT
}

enum ComponentCategory {
  MATERIAL
  LAYER
  UNIT
}

enum ConfirmComponentManufacturerErrorCode {
  UNKNOWN
  UNKNOWN_COMPONENT
  UNKNOWN_INSTITUTION
  UNAUTHORIZED
  UNKNOWN_MANUFACTURER
}

enum ConfirmInstitutionMethodDeveloperErrorCode {
  UNKNOWN
  UNKNOWN_METHOD
  UNKNOWN_INSTITUTION
  UNAUTHORIZED
  UNKNOWN_DEVELOPER
}

enum ConfirmInstitutionRepresentativeErrorCode {
  UNKNOWN
  UNKNOWN_INSTITUTION
  UNKNOWN_USER
  UNAUTHORIZED
  UNKNOWN_REPRESENTATIVE
}

enum ConfirmUserEmailChangeErrorCode {
  UNKNOWN
  DUPLICATE_EMAIL
  INVALID_CONFIRMATION_CODE
  UNKNOWN_USER
}

enum ConfirmUserEmailErrorCode {
  UNKNOWN
  UNKNOWN_USER
  INVALID_CONFIRMATION_CODE
}

enum ConfirmUserMethodDeveloperErrorCode {
  UNKNOWN
  UNKNOWN_METHOD
  UNKNOWN_USER
  UNAUTHORIZED
  UNKNOWN_DEVELOPER
}

enum CreateComponentErrorCode {
  UNKNOWN
  UNKNOWN_MANUFACTURER
  UNAUTHORIZED
}

enum CreateDataFormatErrorCode {
  UNKNOWN
  TWO_REFERENCES
  UNKNOWN_MANAGER
  UNAUTHORIZED
}

enum CreateDatabaseErrorCode {
  UNKNOWN
  UNAUTHORIZED
  UNKNOWN_OPERATOR
}

enum CreateInstitutionErrorCode {
  UNKNOWN
  NEITHER_OWNER_NOR_MANAGER
  UNKNOWN_OWNERS
  UNKNOWN_MANAGER
  UNAUTHORIZED
}

enum CreateMethodErrorCode {
  UNKNOWN
  TWO_REFERENCES
  UNKNOWN_MANAGER
  UNKNOWN_INSTITUTION_DEVELOPERS
  UNKNOWN_USER_DEVELOPERS
  UNAUTHORIZED
}

enum DatabaseVerificationState {
  PENDING
  VERIFIED
}

enum DeleteInstitutionErrorCode {
  UNKNOWN
  UNKNOWN_INSTITUTION
  UNAUTHORIZED
  MANAGING
}

enum DeletePersonalUserDataErrorCode {
  UNKNOWN
  UNKNOWN_USER
  MISSING_PASSWORD
  INCORRECT_PASSWORD
}

enum DeleteUserErrorCode {
  UNKNOWN
  UNKNOWN_USER
  UNAUTHORIZED
}

enum DisableUserTwoFactorAuthenticationErrorCode {
  UNKNOWN
  UNKNOWN_USER
}

enum EnableUserTwoFactorAuthenticatorErrorCode {
  UNKNOWN
  UNKNOWN_USER
  ENABLING_FAILED
  INVALID_VERIFICATION_CODE
}

enum ForgetUserTwoFactorAuthenticationClientErrorCode {
  UNKNOWN
  UNKNOWN_USER
}

enum GenerateUserTwoFactorAuthenticatorSharedKeyAndQrCodeUriErrorCode {
  UNKNOWN
  UNKNOWN_USER
  RESETTING_AUTHENTICATOR_KEY_FAILED
  GETTING_AUTHENTICATOR_KEY_FAILED
  GETTING_EMAIL_FAILED
}

enum GenerateUserTwoFactorRecoveryCodesErrorCode {
  UNKNOWN
  UNKNOWN_USER
  TWO_FACTOR_AUTHENTICATION_DISABLED
  CODE_GENERATION_FAILED
}

enum InstitutionRepresentativeRole {
  OWNER
  ASSISTANT
}

enum InstitutionState {
  PENDING
  VERIFIED
}

enum LoginUserErrorCode {
  INVALID
  LOCKED_OUT
  NOT_ALLOWED
  UNKNOWN
}

enum LoginUserWithRecoveryCodeErrorCode {
  UNKNOWN
  UNKNOWN_USER
  NOT_ALLOWED
  LOCKED_OUT
  INVALID_RECOVERY_CODE
}

enum LoginUserWithTwoFactorCodeErrorCode {
  UNKNOWN
  UNKNOWN_USER
  NOT_ALLOWED
  LOCKED_OUT
  INVALID_AUTHENTICATOR_CODE
}

enum LogoutUserErrorCode {
  UNKNOWN
}

enum MethodCategory {
  MEASUREMENT
  CALCULATION
}

enum PrimeSurface {
  INSIDE
  OUTSIDE
}

enum RegisterUserErrorCode {
  UNKNOWN
  PASSWORD_CONFIRMATION_MISMATCH
  DUPLICATE_EMAIL
  INVALID_EMAIL
  PASSWORD_REQUIRES_DIGIT
  PASSWORD_REQUIRES_LOWER
  PASSWORD_REQUIRES_NON_ALPHANUMERIC
  PASSWORD_REQUIRES_UPPER
  PASSWORD_TOO_SHORT
  NULL_OR_EMPTY_EMAIL
}

enum RemoveComponentAssemblyErrorCode {
  UNKNOWN
  UNKNOWN_ASSEMBLED_COMPONENT
  UNKNOWN_PART_COMPONENT
  UNKNOWN_ASSEMBLY
  UNAUTHORIZED
}

enum RemoveComponentGeneralizationErrorCode {
  UNKNOWN
  UNKNOWN_GENERAL_COMPONENT
  UNKNOWN_CONCRETE_COMPONENT
  UNKNOWN_GENERALIZATION
  UNAUTHORIZED
}

enum RemoveComponentManufacturerErrorCode {
  UNKNOWN
  UNKNOWN_COMPONENT
  UNKNOWN_INSTITUTION
  UNAUTHORIZED
  UNKNOWN_MANUFACTURER
  LAST_MANUFACTURER
}

enum RemoveComponentVariantErrorCode {
  UNKNOWN
  UNKNOWN_ONE_COMPONENT
  UNKNOWN_OTHER_COMPONENT
  UNKNOWN_VARIANT
  UNAUTHORIZED
}

enum RemoveInstitutionMethodDeveloperErrorCode {
  UNKNOWN
  UNKNOWN_METHOD
  UNKNOWN_INSTITUTION
  UNAUTHORIZED
  UNKNOWN_DEVELOPER
}

enum RemoveInstitutionRepresentativeErrorCode {
  UNKNOWN
  LAST_OWNER
  UNAUTHORIZED
  UNKNOWN_INSTITUTION
  UNKNOWN_REPRESENTATIVE
  UNKNOWN_USER
}

enum RemoveUserMethodDeveloperErrorCode {
  UNKNOWN
  UNKNOWN_METHOD
  UNKNOWN_USER
  UNAUTHORIZED
  UNKNOWN_DEVELOPER
}

enum RemoveUserRoleErrorCode {
  UNKNOWN
  UNKNOWN_USER
  UNAUTHORIZED
}

enum RequestUserPasswordResetErrorCode {
  UNKNOWN
}

enum ResendUserEmailConfirmationErrorCode {
  UNKNOWN
}

enum ResendUserEmailVerificationErrorCode {
  UNKNOWN
  UNKNOWN_USER
  UNKNOWN_EMAIL
}

enum ResetUserPasswordErrorCode {
  UNKNOWN
  INVALID_RESET_CODE
  PASSWORD_CONFIRMATION_MISMATCH
  PASSWORD_REQUIRES_DIGIT
  PASSWORD_REQUIRES_LOWER
  PASSWORD_REQUIRES_NON_ALPHANUMERIC
  PASSWORD_REQUIRES_UPPER
  PASSWORD_TOO_SHORT
}

enum ResetUserTwoFactorAuthenticatorErrorCode {
  UNKNOWN
  UNKNOWN_USER
  DISABLING_FAILED
  RESETTING_FAILED
}

enum SetUserPasswordErrorCode {
  UNKNOWN
  UNKNOWN_USER
  EXISTING_PASSWORD
  PASSWORD_CONFIRMATION_MISMATCH
  PASSWORD_REQUIRES_DIGIT
  PASSWORD_REQUIRES_LOWER
  PASSWORD_REQUIRES_NON_ALPHANUMERIC
  PASSWORD_REQUIRES_UPPER
  PASSWORD_TOO_SHORT
}

enum SetUserPhoneNumberErrorCode {
  UNKNOWN
  UNKNOWN_USER
  UNCHANGED_PHONE_NUMBER
}

enum SortEnumType {
  ASC
  DESC
}

enum Standardizer {
  AERC
  AGI
  ASHRAE
  BREEAM
  BS
  BSI
  CEN
  CIE
  DGNB
  DIN
  DVWG
  IEC
  IES
  IFT
  ISO
  JIS
  LEED
  NFRC
  RIBA
  UL
  UNECE
  VDI
  VFF
  WELL
}

enum UpdateComponentAssemblyErrorCode {
  UNKNOWN
  UNKNOWN_ASSEMBLED_COMPONENT
  UNKNOWN_PART_COMPONENT
  UNKNOWN_ASSEMBLY
  UNAUTHORIZED
}

enum UpdateComponentErrorCode {
  UNKNOWN
  UNKNOWN_MANUFACTURER
  UNKNOWN_FURTHER_MANUFACTURERS
  UNKNOWN_VARIANT_OF_COMPONENTS
  UNKNOWN_GENERALIZATION_OF_COMPONENTS
  UNKNOWN_CONCRETIZATION_OF_COMPONENTS
  UNKNOWN_PART_OF_COMPONENTS
  UNKNOWN_ASSEMBLED_OF_COMPONENTS
  UNAUTHORIZED
  UNKNOWN_COMPONENT
}

enum UpdateDataFormatErrorCode {
  UNKNOWN
  TWO_REFERENCES
  UNAUTHORIZED
  UNKNOWN_DATA_FORMAT
}

enum UpdateDatabaseErrorCode {
  UNKNOWN
  UNAUTHORIZED
  UNKNOWN_DATABASE
}

enum UpdateInstitutionErrorCode {
  UNKNOWN
  UNAUTHORIZED
  UNKNOWN_INSTITUTION
}

enum UpdateMethodErrorCode {
  UNKNOWN
  TWO_REFERENCES
  UNAUTHORIZED
  UNKNOWN_METHOD
}

enum UserRole {
  ADMINISTRATOR
  VERIFIER
}

enum VerifyDatabaseErrorCode {
  UNKNOWN
  UNAUTHORIZED
  UNKNOWN_DATABASE
  WRONG_VERIFICATION_CODE
  REQUEST_FAILED
  DESERIALIZATION_FAILED
}

enum VerifyInstitutionErrorCode {
  UNKNOWN
  UNKNOWN_INSTITUTION
  UNAUTHORIZED
}

directive @authorize("Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = VALIDATION "The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!]) repeatable on OBJECT | FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

scalar Any

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The NonNegativeInt scalar type represents a unsigned 32-bit numeric non-fractional value equal to or greater than 0."
scalar NonNegativeInt

scalar Url

scalar Uuid