fragment UserPartial on User {
  id
  uuid
  name
  email
}

query Users {
  users {
    nodes {
      ...UserPartial
    }
  }
}

query User($uuid: Uuid!) {
  user(uuid: $uuid) {
    id
    uuid
    name
    email
    phoneNumber
    websiteLocator
    roles
    rolesCurrentUserCanAdd
    rolesCurrentUserCanRemove
    canCurrentUserDeleteUser
    developedMethods {
      edges {
        node {
          id
          uuid
          name
        }
      }
    }
    pendingDevelopedMethods: developedMethods(pending: true) {
      edges {
        node {
          id
          uuid
          name
        }
      }
      canCurrentUserConfirmEdge
    }
    representedInstitutions {
      edges {
        node {
          id
          uuid
          name
        }
      }
    }
    pendingRepresentedInstitutions: representedInstitutions(pending: true) {
      edges {
        node {
          id
          uuid
          name
        }
      }
      canCurrentUserConfirmEdge
    }
  }
}

mutation RegisterUser(
  $name: String!
  $email: String!
  $password: String!
  $passwordConfirmation: String!
  $returnTo: Url
) {
  registerUser(
    input: {
      name: $name
      email: $email
      password: $password
      passwordConfirmation: $passwordConfirmation
      returnTo: $returnTo
    }
  ) {
    user {
      ...UserPartial
    }
    errors {
      code
      message
      path
    }
  }
}

mutation ConfirmUserEmail($email: String!, $confirmationCode: String!) {
  confirmUserEmail(
    input: { email: $email, confirmationCode: $confirmationCode }
  ) {
    user {
      ...UserPartial
    }
    errors {
      code
      message
      path
    }
  }
}

mutation ConfirmUserEmailChange(
  $currentEmail: String!
  $newEmail: String!
  $confirmationCode: String!
) {
  confirmUserEmailChange(
    input: {
      currentEmail: $currentEmail
      newEmail: $newEmail
      confirmationCode: $confirmationCode
    }
  ) {
    user {
      ...UserPartial
    }
    errors {
      code
      message
      path
    }
  }
}

mutation RequestUserPasswordReset($email: String!) {
  requestUserPasswordReset(input: { email: $email }) {
    errors {
      code
      message
      path
    }
  }
}

mutation ResetUserPassword(
  $email: String!
  $password: String!
  $passwordConfirmation: String!
  $resetCode: String!
) {
  resetUserPassword(
    input: {
      email: $email
      password: $password
      passwordConfirmation: $passwordConfirmation
      resetCode: $resetCode
    }
  ) {
    errors {
      code
      message
      path
    }
  }
}

mutation DeleteUser($userId: Uuid!) {
  deleteUser(input: { userId: $userId }) {
    errors {
      code
      message
      path
    }
  }
}

mutation AddUserRole($userId: Uuid!, $role: UserRole!) {
  addUserRole(input: { userId: $userId, role: $role }) {
    errors {
      code
      message
      path
    }
  }
}

mutation RemoveUserRole($userId: Uuid!, $role: UserRole!) {
  removeUserRole(input: { userId: $userId, role: $role }) {
    errors {
      code
      message
      path
    }
  }
}
